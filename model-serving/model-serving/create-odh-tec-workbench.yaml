apiVersion: batch/v1
kind: Job
metadata:
  name: create-and-apply-resources
  namespace: llm-hosting
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
  backoffLimit: 4
  template:
    spec:
      serviceAccount: project-creator
      serviceAccountName: project-creator
      containers:
      - name: create-and-apply-resources
        image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        args:
        - -ec
        - |-
          # Get user count
          # user_count=$(oc get namespaces | grep showroom | wc -l)

          echo -n 'Waiting for minio-keys secret'
          while [ -z "\$(oc get secret -n ic-shared-minio minio-keys -oname 2>/dev/null)" ]; do
            echo -n .
            sleep 5
          done; echo

          echo -n 'Waiting for rhods-dashboard route'
          while [ -z "\$(oc get route -n redhat-ods-applications rhods-dashboard -oname 2>/dev/null)" ]; do
            echo -n .
            sleep 5
          done; echo

          # Get needed variables
          MINIO_ROOT_USER=$(oc get secret minio-keys -n ic-shared-minio -o template --template '{{.data.minio_root_user|base64decode}}')
          MINIO_ROOT_PASSWORD=$(oc get secret minio-keys -n ic-shared-minio -o template --template '{{.data.minio_root_password|base64decode}}')
          MINIO_HOST=https://$(oc get route minio -n ic-shared-minio -o template --template '{{.spec.host}}')
          DASHBOARD_ROUTE=https://$(oc get route rhods-dashboard -n redhat-ods-applications -o jsonpath='{.spec.host}')
          echo -n "Done with mini root user vars"

          # Define some variables
          WORKBENCH_NAME="odf-tec"
          WORKBENCH_IMAGE="custom-odh-tec:latest"
          PIPELINE_ENGINE="Tekton"

          echo "Create the workbench PVC"

          # Create the workbench PVC
          cat << EOF | oc apply -f-
          kind: PersistentVolumeClaim
          apiVersion: v1
          metadata:
            annotations:
              openshift.io/description: ''
              openshift.io/display-name: ODH TEC
              volume.beta.kubernetes.io/storage-provisioner: openshift-storage.rbd.csi.ceph.com
              volume.kubernetes.io/storage-provisioner: openshift-storage.rbd.csi.ceph.com
            name: $WORKBENCH_NAME
            namespace: llm-hosting
            finalizers:
              - kubernetes.io/pvc-protection
            labels:
              opendatahub.io/dashboard: 'true'
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 100Gi
            storageClassName: ocs-storagecluster-ceph-rbd
            volumeMode: Filesystem
          EOF

          echo "Create the workbench"

          # Create the workbench
          cat << EOF | oc apply -f-
          apiVersion: kubeflow.org/v1
          kind: Notebook
          metadata:
            annotations:
              notebooks.opendatahub.io/inject-oauth: 'true'
              opendatahub.io/image-display-name: custom-odh-tec
              notebooks.opendatahub.io/oauth-logout-url: >-
                $DASHBOARD_ROUTE/projects/$USER_PROJECT?notebookLogout=$WORKBENCH_NAME
              opendatahub.io/accelerator-name: ''
              openshift.io/description: ''
              openshift.io/display-name: ODH TEC
              notebooks.opendatahub.io/last-image-selection: '$WORKBENCH_IMAGE'
              notebooks.opendatahub.io/last-size-selection: Standard
            name: $WORKBENCH_NAME
            namespace: llm-hosting
            labels:
              app: $WORKBENCH_NAME
              opendatahub.io/dashboard: 'true'
              opendatahub.io/odh-managed: 'true'
          spec:
            template:
              spec:
                affinity: {}
                containers:
                  - resources:
                      limits:
                        cpu: '2'
                        memory: 8Gi
                      requests:
                        cpu: '1'
                        memory: 6Gi
                    readinessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /notebook/$USER_PROJECT/$WORKBENCH_NAME/api
                        port: notebook-port
                        scheme: HTTP
                      initialDelaySeconds: 10
                      periodSeconds: 5
                      successThreshold: 1
                      timeoutSeconds: 1
                    name: $WORKBENCH_NAME
                    livenessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /notebook/$USER_PROJECT/$WORKBENCH_NAME/api
                        port: notebook-port
                        scheme: HTTP
                      initialDelaySeconds: 10
                      periodSeconds: 5
                      successThreshold: 1
                      timeoutSeconds: 1
                    env:
                      - name: NOTEBOOK_ARGS
                        value: |-
                          --ServerApp.port=8888
                                            --ServerApp.token=''
                                            --ServerApp.password=''
                                            --ServerApp.base_url=/notebook/$USER_PROJECT/$WORKBENCH_NAME
                                            --ServerApp.quit_button=False
                                            --ServerApp.tornado_settings={"user":"admin","hub_host":"$DASHBOARD_ROUTE","hub_prefix":"/projects/admin"}
                      - name: JUPYTER_IMAGE
                        value: >-
                          image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/$WORKBENCH_IMAGE
                    ports:
                      - containerPort: 8888
                        name: notebook-port
                        protocol: TCP
                    imagePullPolicy: Always
                    volumeMounts:
                      - mountPath: /opt/app-root/src
                        name: $WORKBENCH_NAME
                      - mountPath: /dev/shm
                        name: shm
                    envFrom:
                       - secretRef:
                           name: aws-connection-models                        
                    image: >-
                      image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/$WORKBENCH_IMAGE
                    workingDir: /opt/app-root/src
                  - resources:
                      limits:
                        cpu: 100m
                        memory: 64Mi
                      requests:
                        cpu: 100m
                        memory: 64Mi
                    readinessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /oauth/healthz
                        port: oauth-proxy
                        scheme: HTTPS
                      initialDelaySeconds: 5
                      periodSeconds: 5
                      successThreshold: 1
                      timeoutSeconds: 1
                    name: oauth-proxy
                    livenessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /oauth/healthz
                        port: oauth-proxy
                        scheme: HTTPS
                      initialDelaySeconds: 30
                      periodSeconds: 5
                      successThreshold: 1
                      timeoutSeconds: 1
                    env:
                      - name: NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                    ports:
                      - containerPort: 8443
                        name: oauth-proxy
                        protocol: TCP
                    imagePullPolicy: Always
                    volumeMounts:
                      - mountPath: /etc/oauth/config
                        name: oauth-config
                      - mountPath: /etc/tls/private
                        name: tls-certificates
                    image: >-
                      registry.redhat.io/openshift4/ose-oauth-proxy@sha256:4bef31eb993feb6f1096b51b4876c65a6fb1f4401fee97fa4f4542b6b7c9bc46
                    args:
                      - '--provider=openshift'
                      - '--https-address=:8443'
                      - '--http-address='
                      - '--openshift-service-account=$WORKBENCH_NAME'
                      - '--cookie-secret-file=/etc/oauth/config/cookie_secret'
                      - '--cookie-expire=24h0m0s'
                      - '--tls-cert=/etc/tls/private/tls.crt'
                      - '--tls-key=/etc/tls/private/tls.key'
                      - '--upstream=http://localhost:8888'
                      - '--upstream-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
                      - '--email-domain=*'
                      - '--skip-provider-button'
                      - >-
                        --openshift-sar={"verb":"get","resource":"notebooks","resourceAPIGroup":"kubeflow.org","resourceName":"$WORKBENCH_IMAGE","namespace":"$USER_PROJECT"}
                      - >-
                        --logout-url=$DASHBOARD_ROUTE/projects/admin?notebookLogout=$WORKBENCH_IMAGE
                enableServiceLinks: false
                serviceAccountName: $WORKBENCH_NAME
                tolerations:
                  - effect: NoSchedule
                    key: notebooksonly
                    operator: Exists
                volumes:
                  - name: $WORKBENCH_NAME
                    persistentVolumeClaim:
                      claimName: $WORKBENCH_NAME
                  - emptyDir:
                      medium: Memory
                    name: shm
                  - name: oauth-config
                    secret:
                      defaultMode: 420
                      secretName: $WORKBENCH_NAME-oauth-config
                  - name: tls-certificates
                    secret:
                      defaultMode: 420
                      secretName: $WORKBENCH_NAME-tls
            readyReplicas: 1
          EOF

          echo "Clone the repo"

          # Git clone job
          cat << EOF | oc apply -f-
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: clone-repo
            namespace: llm-hosting
          spec:
            backoffLimit: 4
            template:
              spec:
                serviceAccount: demo-setup
                serviceAccountName: demo-setup
                initContainers:
                - name: wait-for-workbench
                  image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
                  imagePullPolicy: IfNotPresent
                  command: ["/bin/bash"]
                  args:
                  - -ec
                  - |-
                    echo -n "Waiting for workbench pod in llm-hosting namespace"
                    while [ -z "\$(oc get pods -n llm-hosting -l app=$WORKBENCH_NAME -o custom-columns=STATUS:.status.phase --no-headers | grep Running 2>/dev/null)" ]; do
                        echo -n '.'
                        sleep 1
                    done
                    echo "Workbench pod is running in llm-hosting namespace"
                containers:
                - name: git-clone
                  image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
                  imagePullPolicy: IfNotPresent
                  command: ["/bin/bash"]
                  args:
                  - -ec
                  - |-
                    pod_name=\$(oc get pods --selector=app=$WORKBENCH_NAME -o jsonpath='{.items[0].metadata.name}') && oc exec \$pod_name -- git clone https://github.com/rhpds/models-aas.git
                restartPolicy: Never
          EOF

      restartPolicy: Never